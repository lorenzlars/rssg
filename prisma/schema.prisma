// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  feeds     Feed[]
  posts     Post[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Feed {
  id          String  @id @default(uuid())
  description String?
  url         String?
  code        String?
  interval    Int?
  ownerId     String
  owner       User    @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  posts       Post[]
}

model Post {
  id          String   @id @default(uuid())
  description String?
  title       String?
  link        String?
  content     String?
  date        DateTime @default(now()) @db.Timestamptz(6)
  feedId      String
  feed        Feed     @relation(fields: [feedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
}
